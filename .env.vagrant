#
# Bird's Eye - see https://github.com/inex/birdseye
#
# Values that are commented show their default setting.

# To query Bird securely, we use a wrapper script

BIRDC="/usr/bin/sudo /vagrant/bin/birdc -4 -s /var/run/bird/rs.sock"
#BIRDC="/usr/bin/sudo /vagrant/bin/birdc -6 -s /var/run/bird/rs6.sock"

# We use caching as a natural API -> birdc rate limiter
# Changing to 'array' will disable the cache but this is strongly discouraged
# [this is Memcache for 127.0.0.1:11211 by default]
CACHE_DRIVER=array

# A cache key is required only if relying on a default .env configuration.
# If you're relying on the automated configuration discovery detailed at:
#   https://github.com/inex/birdseye#configuration
# then this is set automatically and appropriatly.
BIRDSEYE_CACHE_KEY="vagrant_test"

# Set to true for testing / debugging.
# This will provide stack dumps and reveal internal logic / configuration.
# It also added "env" and "cache_disabled" to the api section of responses.
APP_DEBUG=true

# For testing, we have including some real Bird IPv4 dumps.
# Setting to true makes Bird's Eye use those rather than querying a local Bird daemon
USE_BIRD_DUMMY=true

# Time (in monutes - Lumen restriction) to store cache objects for:
# CACHE_SHOW_STATUS=1
# CACHE_SHOW_SYMBOLS=5
# CACHE_PROTOCOLS=2
# CACHE_ROUTES=5

# Maximum routes that will be sent back in an API query. We have not created pagination yet so this will be
# a hard limit. The looking glass implementation does not add links for tables / protocols exceeding this.
# Aborts with a 403 when a table/protocol route list has more than this. Uses 'show route ... count' internally.
MAX_ROUTES=1000000

# Maximum API requests per client per minute
THROTTLE_PER_MIN=20

# This micro server also includes a built in looking glass which can be enabled by setting this to true
# The loogking glass is really just to deomostrate the API and uses the same API calls internally as
# are publically available. If enabled, it's available under /lg
LOOKING_GLASS_ENABLED=true

# Page title for looking glass [note: {!VERSION!} will be replaced with the actual version]
LOOKING_GLASS_TITLE="Bird's Eye Looking Glass - VAGRANT - API V{!VERSION!}"

# The LG displays the BGP protocol description. These can sometimes be internal
# machine generated / unwieldy strings. If you want to pluck out just a bit of
# this you can set a regex here and, when valid and matches against the description,
# it plucks the first subpattern match (i.e. (xxx) ) and sets that in
# the API response as description_short. The frontend LG will also prefer this if set.
#
#Â Note that the system adds anchors and Bird output matching so the evaluated regex is:
#      '/^\s+Description:\s+' . env( 'PARSER_PROTOCOL_BGP_DESCRIPTION' ) . '$/'
#
# E.g. to pluck 'ppp-rb01' out of 'RR Client - ppp-rb01', you might use:
#     PARSER_PROTOCOL_BGP_DESCRIPTION=".*\s+([a-zA-Z0-9\-_]+)"
#
#PARSER_PROTOCOL_BGP_DESCRIPTION=""
